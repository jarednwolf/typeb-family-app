rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function isFamilyMember(familyId) {
      return isAuthenticated() && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.familyId == familyId;
    }
    
    function isParentInFamily(familyId) {
      return isFamilyMember(familyId) && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'parent';
    }
    
    // Users collection
    match /users/{userId} {
      allow read: if isOwner(userId) || 
        (isAuthenticated() && 
         resource.data.familyId == get(/databases/$(database)/documents/users/$(request.auth.uid)).data.familyId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) || 
        (isParentInFamily(resource.data.familyId) && 
         request.resource.data.diff(resource.data).affectedKeys().hasOnly(['points', 'tasksCompleted']));
      allow delete: if false; // Users cannot be deleted through client
    }
    
    // Families collection
    match /families/{familyId} {
      allow read: if isFamilyMember(familyId);
      allow create: if isAuthenticated() && 
        request.resource.data.createdBy == request.auth.uid;
      allow update: if isParentInFamily(familyId);
      allow delete: if false; // Families cannot be deleted through client
      
      // Family subcollections
      match /invites/{inviteId} {
        allow read: if true; // Anyone with invite code can read
        allow create: if isParentInFamily(familyId);
        allow update: if isParentInFamily(familyId);
        allow delete: if isParentInFamily(familyId);
      }
    }
    
    // Tasks collection
    match /tasks/{taskId} {
      allow read: if isFamilyMember(resource.data.familyId);
      allow create: if isParentInFamily(request.resource.data.familyId) || 
        (isFamilyMember(request.resource.data.familyId) && 
         request.resource.data.createdBy == request.auth.uid);
      allow update: if isParentInFamily(resource.data.familyId) || 
        (resource.data.assignedTo == request.auth.uid && 
         request.resource.data.diff(resource.data).affectedKeys()
           .hasOnly(['status', 'completedAt', 'photoUrl', 'completionNotes']));
      allow delete: if isParentInFamily(resource.data.familyId);
    }
    
    // Categories collection
    match /categories/{categoryId} {
      allow read: if true; // Public categories available to all
      allow write: if false; // Only admin can modify via admin SDK
      
      // Custom categories per family
      match /custom/{customId} {
        allow read: if isFamilyMember(resource.data.familyId);
        allow create: if isParentInFamily(request.resource.data.familyId);
        allow update: if isParentInFamily(resource.data.familyId);
        allow delete: if isParentInFamily(resource.data.familyId);
      }
    }
    
    // Rewards collection
    match /rewards/{rewardId} {
      allow read: if isFamilyMember(resource.data.familyId);
      allow create: if isParentInFamily(request.resource.data.familyId);
      allow update: if isParentInFamily(resource.data.familyId) || 
        (resource.data.childId == request.auth.uid && 
         request.resource.data.diff(resource.data).affectedKeys().hasOnly(['redeemed', 'redeemedAt']));
      allow delete: if isParentInFamily(resource.data.familyId);
    }
    
    // Notifications collection
    match /notifications/{notificationId} {
      allow read: if resource.data.userId == request.auth.uid;
      allow create: if false; // Only created by Cloud Functions
      allow update: if resource.data.userId == request.auth.uid && 
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['read', 'readAt']);
      allow delete: if resource.data.userId == request.auth.uid;
    }
    
    // Analytics collection (read-only for clients)
    match /analytics/{document=**} {
      allow read: if isAuthenticated();
      allow write: if false; // Only Cloud Functions can write
    }
    
    // Subscriptions collection
    match /subscriptions/{subscriptionId} {
      allow read: if resource.data.userId == request.auth.uid || 
        isParentInFamily(resource.data.familyId);
      allow create: if false; // Only created by payment processor
      allow update: if false; // Only updated by payment processor
      allow delete: if false;
    }
  }
}