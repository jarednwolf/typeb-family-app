rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function getUserData(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data;
    }
    
    function getFamilyData(familyId) {
      return get(/databases/$(database)/documents/families/$(familyId)).data;
    }
    
    // Users collection
    match /users/{userId} {
      // Users can read their own profile
      // Users can read profiles of other users in their family
      allow read: if isOwner(userId) ||
        (isAuthenticated() && 
         resource.data.familyId != null &&
         getUserData(request.auth.uid).familyId == resource.data.familyId);
         
      // Users can only create their own profile
      allow create: if isOwner(userId);
      
      // Users can update their own profile
      // Parents can update family members' familyId when managing the family
      allow update: if isOwner(userId) ||
        (isAuthenticated() &&
         resource.data.familyId != null &&
         request.auth.uid in getFamilyData(resource.data.familyId).parentIds &&
         request.resource.data.diff(resource.data).affectedKeys().hasOnly(['familyId', 'updatedAt']));
         
      allow delete: if false;
    }
    
    // Families collection
    match /families/{familyId} {
      // Members can read their family
      allow read: if isAuthenticated() && 
        request.auth.uid in resource.data.memberIds;
        
      // Authenticated users can create a family if they're the creator
      allow create: if isAuthenticated() &&
        request.resource.data.createdBy == request.auth.uid &&
        request.auth.uid in request.resource.data.memberIds &&
        request.auth.uid in request.resource.data.parentIds;
        
      // Parents can update the family
      allow update: if isAuthenticated() &&
        request.auth.uid in resource.data.parentIds;
        
      allow delete: if false;
    }
    
    // Tasks collection
    match /tasks/{taskId} {
      // Family members can read tasks
      allow read: if isAuthenticated() &&
        getUserData(request.auth.uid).familyId == resource.data.familyId;
        
      // Parents can create tasks
      allow create: if isAuthenticated() &&
        getUserData(request.auth.uid).familyId == request.resource.data.familyId &&
        request.auth.uid in getFamilyData(request.resource.data.familyId).parentIds &&
        request.resource.data.createdBy == request.auth.uid;
        
      // Parents can update any task, children can update their assigned tasks
      allow update: if isAuthenticated() &&
        getUserData(request.auth.uid).familyId == resource.data.familyId &&
        (request.auth.uid in getFamilyData(resource.data.familyId).parentIds ||
         resource.data.assignedTo == request.auth.uid);
         
      // Parents can delete tasks
      allow delete: if isAuthenticated() &&
        getUserData(request.auth.uid).familyId == resource.data.familyId &&
        request.auth.uid in getFamilyData(resource.data.familyId).parentIds;
    }
    
    // Custom categories collection
    match /customCategories/{categoryId} {
      // Family members can read their family's categories
      allow read: if isAuthenticated() &&
        getUserData(request.auth.uid).familyId == resource.data.familyId;
        
      // Parents can create categories (premium feature check done in app)
      allow create: if isAuthenticated() &&
        getUserData(request.auth.uid).familyId == request.resource.data.familyId &&
        request.auth.uid in getFamilyData(request.resource.data.familyId).parentIds;
        
      // Parents can update categories
      allow update: if isAuthenticated() &&
        getUserData(request.auth.uid).familyId == resource.data.familyId &&
        request.auth.uid in getFamilyData(resource.data.familyId).parentIds;
        
      // Parents can delete categories
      allow delete: if isAuthenticated() &&
        getUserData(request.auth.uid).familyId == resource.data.familyId &&
        request.auth.uid in getFamilyData(resource.data.familyId).parentIds;
    }
    
    // Support tickets collection
    match /supportTickets/{ticketId} {
      // Users can read their own tickets
      allow read: if isAuthenticated() && 
        request.auth.uid == resource.data.userId;
        
      // Authenticated users can create tickets
      allow create: if isAuthenticated() &&
        request.resource.data.userId == request.auth.uid;
        
      // Users can update their own tickets (add responses)
      allow update: if isAuthenticated() &&
        request.auth.uid == resource.data.userId &&
        request.resource.data.diff(resource.data).affectedKeys()
          .hasAny(['responses', 'updatedAt', 'status']);
          
      // Support staff can update any ticket (requires custom claim)
      allow update: if isAuthenticated() &&
        request.auth.token.supportStaff == true;
        
      allow delete: if false;
    }
    
    // FAQ collection
    match /faq/{faqId} {
      // Anyone can read FAQs
      allow read: if true;
      
      // Only authenticated users can vote on FAQs
      allow update: if isAuthenticated() && 
        request.resource.data.diff(resource.data).affectedKeys()
          .hasOnly(['helpful', 'notHelpful']);
          
      // Only support staff can create/delete FAQs
      allow create, delete: if isAuthenticated() &&
        request.auth.token.supportStaff == true;
    }
    
    // Analytics data collection (write-only from app)
    match /analytics/{document} {
      allow read: if false;
      allow write: if isAuthenticated();
    }
    
    // User preferences collection
    match /userPreferences/{userId} {
      allow read, write: if isOwner(userId);
    }
    
    // Notification tokens collection
    match /notificationTokens/{tokenId} {
      allow read: if isAuthenticated() &&
        request.auth.uid == resource.data.userId;
      allow write: if isAuthenticated() &&
        request.auth.uid == request.resource.data.userId;
    }
    
    // Security profiles collection
    match /securityProfiles/{userId} {
      allow read: if isOwner(userId);
      allow write: if isOwner(userId);
    }
    
    // Rate limits collection (server-side only in production)
    match /rateLimit/{document} {
      // In production, this should be handled server-side only
      allow read, write: if false;
    }
  }
}