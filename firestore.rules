rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function getUserData() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
    }
    
    function getFamilyData(familyId) {
      return get(/databases/$(database)/documents/families/$(familyId)).data;
    }
    
    function isInFamily(familyId) {
      return isAuthenticated() && 
        getUserData().familyId == familyId;
    }
    
    function isFamilyMember(familyId) {
      return isAuthenticated() && 
        request.auth.uid in getFamilyData(familyId).memberIds;
    }
    
    function isFamilyParent(familyId) {
      return isAuthenticated() && 
        request.auth.uid in getFamilyData(familyId).parentIds;
    }
    
    // Users collection
    match /users/{userId} {
      // Users can read their own document
      allow read: if isOwner(userId);
      
      // Users in the same family can read each other's documents
      allow read: if isAuthenticated() && 
        resource.data.familyId != null &&
        getUserData().familyId == resource.data.familyId;
      
      // Users can create their own document during signup
      allow create: if isOwner(userId) && 
        request.resource.data.keys().hasAll(['email', 'displayName', 'createdAt']) &&
        request.resource.data.email == request.auth.token.email;
      
      // Users can update their own document
      allow update: if isOwner(userId) &&
        // Can't change email or createdAt
        request.resource.data.email == resource.data.email &&
        request.resource.data.createdAt == resource.data.createdAt;
      
      // Users cannot delete their own document
      allow delete: if false;
    }
    
    // Families collection
    match /families/{familyId} {
      // Family members can read their family document
      allow read: if isFamilyMember(familyId);
      
      // Authenticated users can create a family
      allow create: if isAuthenticated() &&
        request.resource.data.createdBy == request.auth.uid &&
        request.auth.uid in request.resource.data.memberIds &&
        request.auth.uid in request.resource.data.parentIds &&
        request.resource.data.keys().hasAll(['name', 'inviteCode', 'createdBy', 'memberIds', 'parentIds']);
      
      // Only family parents can update family settings
      allow update: if isFamilyParent(familyId) &&
        // Can't change createdBy or createdAt
        request.resource.data.createdBy == resource.data.createdBy &&
        request.resource.data.createdAt == resource.data.createdAt;
      
      // Only the family creator can delete the family
      allow delete: if isAuthenticated() && 
        resource.data.createdBy == request.auth.uid;
    }
    
    // Tasks collection
    match /tasks/{taskId} {
      // Family members can read tasks in their family
      allow read: if isInFamily(resource.data.familyId);
      
      // Family members can create tasks
      allow create: if isInFamily(request.resource.data.familyId) &&
        request.resource.data.createdBy == request.auth.uid &&
        request.resource.data.keys().hasAll(['familyId', 'title', 'assignedTo', 'status', 'createdBy']);
      
      // Task assignee can update their own tasks (complete, add photo)
      allow update: if isInFamily(resource.data.familyId) &&
        (request.auth.uid == resource.data.assignedTo ||
         isFamilyParent(resource.data.familyId)) &&
        // Can't change familyId, createdBy, or createdAt
        request.resource.data.familyId == resource.data.familyId &&
        request.resource.data.createdBy == resource.data.createdBy &&
        request.resource.data.createdAt == resource.data.createdAt;
      
      // Parents can delete tasks in their family
      allow delete: if isFamilyParent(resource.data.familyId);
    }
    
    // Activity logs collection (audit trail)
    match /activity/{activityId} {
      // Family members can read their family's activity
      allow read: if isInFamily(resource.data.familyId);
      
      // System creates activity logs (through security rules)
      allow create: if isInFamily(request.resource.data.familyId) &&
        request.resource.data.userId == request.auth.uid &&
        request.resource.data.keys().hasAll(['familyId', 'userId', 'action', 'entityType', 'entityId']);
      
      // Activity logs cannot be updated or deleted
      allow update: if false;
      allow delete: if false;
    }
    
    // Notifications collection
    match /notifications/{notificationId} {
      // Users can read their own notifications
      allow read: if isOwner(resource.data.userId);
      
      // System creates notifications
      allow create: if false; // Only through Cloud Functions
      
      // Users can mark their notifications as read
      allow update: if isOwner(resource.data.userId) &&
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['read']);
      
      // Users can delete their own notifications
      allow delete: if isOwner(resource.data.userId);
    }
    
    // Invites collection
    match /invites/{inviteId} {
      // Anyone can read invites by code (for joining)
      allow read: if true;
      
      // Family parents can create invites
      allow create: if isFamilyParent(request.resource.data.familyId) &&
        request.resource.data.invitedBy == request.auth.uid;
      
      // Invites can be marked as accepted
      allow update: if isAuthenticated() &&
        request.resource.data.status == 'accepted' &&
        resource.data.status == 'pending';
      
      // Family parents can delete invites
      allow delete: if isFamilyParent(resource.data.familyId);
    }
    
    // Subscriptions collection (for premium features)
    match /subscriptions/{subscriptionId} {
      // Users can read their own subscriptions
      allow read: if isOwner(resource.data.userId);
      
      // Family members can read their family's subscription
      allow read: if isInFamily(resource.data.familyId);
      
      // Subscriptions are managed by Cloud Functions (RevenueCat webhook)
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }
}