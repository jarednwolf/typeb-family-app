rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    // Check if user belongs to a family (simplified to avoid nested reads)
    function belongsToFamily(familyId) {
      return isAuthenticated() && 
        familyId != null &&
        request.auth.uid in resource.data.memberIds;
    }
    
    // Check if user is a parent in the family (simplified)
    function isParentInFamily(familyId) {
      return isAuthenticated() && 
        familyId != null &&
        request.auth.uid in resource.data.parentIds;
    }
    
    // Users collection
    match /users/{userId} {
      // Users can read their own profile
      allow read: if isOwner(userId);
      
      // Users can read profiles of family members (check both users have same non-null familyId)
      allow read: if isAuthenticated() && 
        resource.data.familyId != null &&
        resource.data.familyId == get(/databases/$(database)/documents/users/$(request.auth.uid)).data.familyId;
      
      // Users can only create their own profile
      allow create: if isOwner(userId) &&
        request.resource.data.email == request.auth.token.email;
      
      // Users can update their own profile
      allow update: if isOwner(userId);
      
      // Parents can update family member's familyId and role when managing family
      allow update: if isAuthenticated() &&
        resource.data.familyId != null &&
        exists(/databases/$(database)/documents/families/$(resource.data.familyId)) &&
        request.auth.uid in get(/databases/$(database)/documents/families/$(resource.data.familyId)).data.parentIds &&
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['familyId', 'role', 'updatedAt']);
      
      allow delete: if false;
    }
    
    // Families collection
    match /families/{familyId} {
      // Members can read their family
      allow read: if belongsToFamily(familyId);
      
      // Authenticated users can create a family if they're setting themselves as creator and parent
      allow create: if isAuthenticated() &&
        request.resource.data.createdBy == request.auth.uid &&
        request.auth.uid in request.resource.data.memberIds &&
        request.auth.uid in request.resource.data.parentIds &&
        request.resource.data.memberIds.size() >= 1 &&
        request.resource.data.parentIds.size() >= 1;
      
      // Parents can update the family
      allow update: if isParentInFamily(familyId);
      
      // No one can delete families
      allow delete: if false;
    }
    
    // Tasks collection
    match /tasks/{taskId} {
      // Family members can read tasks from their family
      allow read: if isAuthenticated() &&
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.familyId == resource.data.familyId;
      
      // Parents can create tasks for their family
      allow create: if isAuthenticated() &&
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        exists(/databases/$(database)/documents/families/$(request.resource.data.familyId)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.familyId == request.resource.data.familyId &&
        request.auth.uid in get(/databases/$(database)/documents/families/$(request.resource.data.familyId)).data.parentIds &&
        request.resource.data.createdBy == request.auth.uid;
      
      // Parents can update any task in their family
      allow update: if isAuthenticated() &&
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.familyId == resource.data.familyId &&
        request.auth.uid in get(/databases/$(database)/documents/families/$(resource.data.familyId)).data.parentIds;
      
      // Children can update their assigned tasks (limited fields)
      allow update: if isAuthenticated() &&
        resource.data.assignedTo == request.auth.uid &&
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['status', 'completedAt', 'completedBy', 'photoUrl', 'updatedAt']);
      
      // Parents can delete tasks in their family
      allow delete: if isAuthenticated() &&
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.familyId == resource.data.familyId &&
        request.auth.uid in get(/databases/$(database)/documents/families/$(resource.data.familyId)).data.parentIds;
    }
    
    // Security profiles collection
    match /securityProfiles/{userId} {
      allow read: if isOwner(userId);
      allow write: if isOwner(userId);
    }
    
    // Rate limits collection (server-side only)
    match /rateLimits/{document} {
      allow read: if false;
      allow write: if false;
    }
    
    // Test collections (for emulator testing only - remove in production)
    match /test-collection/{document} {
      allow read, write: if isAuthenticated();
    }
  }
}