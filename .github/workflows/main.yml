name: CI/CD Pipeline

on:
  push:
    branches: [main, staging, develop]
  pull_request:
    branches: [main, staging]

env:
  NODE_VERSION: '18'
  PNPM_VERSION: '8'

jobs:
  # Job 1: Code Quality Checks
  quality:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
          
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        
      - name: Run TypeScript checks
        run: pnpm type-check
        
      - name: Run linter
        run: pnpm lint
        
      - name: Check formatting
        run: pnpm format:check

  # Job 2: Test Suite
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    needs: quality
    strategy:
      matrix:
        test-suite: [unit, integration]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
          
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        
      - name: Run ${{ matrix.test-suite }} tests
        run: pnpm test:${{ matrix.test-suite }}
        
      - name: Upload coverage
        if: matrix.test-suite == 'unit'
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./coverage/lcov.info

  # Job 3: Security Scanning
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: quality
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Run Snyk Security Scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high
          
      - name: Run npm audit
        run: pnpm audit --audit-level=high

  # Job 4: Build Applications
  build:
    name: Build Applications
    runs-on: ubuntu-latest
    needs: [quality, test]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/staging'
    strategy:
      matrix:
        app: [web, mobile]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
          
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        
      - name: Build packages
        run: pnpm build:packages
        
      - name: Build ${{ matrix.app }}
        run: pnpm build:${{ matrix.app }}
        
      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.app }}-build
          path: |
            apps/web/.next/
            typeb-family-app/dist/
          retention-days: 7

  # Job 5: Deploy Web to Vercel
  deploy-web:
    name: Deploy Web to Vercel
    runs-on: ubuntu-latest
    needs: [build, security]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/staging'
    environment:
      name: ${{ github.ref == 'refs/heads/main' && 'production' || 'staging' }}
      url: ${{ steps.deploy.outputs.url }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Deploy to Vercel
        id: deploy
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: ${{ github.ref == 'refs/heads/main' && '--prod' || '' }}
          scope: ${{ secrets.VERCEL_ORG_ID }}
          
      - name: Comment deployment URL
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '✅ Deployed to Vercel: ${{ steps.deploy.outputs.url }}'
            })

  # Job 6: Deploy Firebase
  deploy-firebase:
    name: Deploy Firebase Services
    runs-on: ubuntu-latest
    needs: [build, security]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/staging'
    environment:
      name: ${{ github.ref == 'refs/heads/main' && 'production' || 'staging' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: Install Firebase CLI
        run: npm install -g firebase-tools
        
      - name: Select Firebase project
        run: |
          if [ "${{ github.ref }}" == "refs/heads/main" ]; then
            firebase use typeb-family-app --token ${{ secrets.FIREBASE_TOKEN }}
          else
            firebase use typeb-family-app-staging --token ${{ secrets.FIREBASE_TOKEN }}
          fi
          
      - name: Deploy Firestore rules
        run: firebase deploy --only firestore:rules --token ${{ secrets.FIREBASE_TOKEN }}
        
      - name: Deploy Storage rules
        run: firebase deploy --only storage:rules --token ${{ secrets.FIREBASE_TOKEN }}
        
      - name: Deploy Cloud Functions
        run: firebase deploy --only functions --token ${{ secrets.FIREBASE_TOKEN }}

  # Job 7: Mobile Build Trigger
  trigger-mobile-build:
    name: Trigger Mobile Build
    runs-on: ubuntu-latest
    needs: [build, security]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Trigger EAS Build
        run: |
          curl -X POST https://api.expo.dev/v2/projects/${{ secrets.EXPO_PROJECT_ID }}/builds \
            -H "Authorization: Bearer ${{ secrets.EXPO_TOKEN }}" \
            -H "Content-Type: application/json" \
            -d '{
              "platform": "ios",
              "profile": "production",
              "message": "Build triggered by GitHub Actions"
            }'

  # Job 8: E2E Tests (Optional)
  e2e:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: deploy-web
    if: github.ref == 'refs/heads/staging'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: Install Playwright
        run: npx playwright install --with-deps
        
      - name: Run E2E tests
        run: pnpm test:e2e
        env:
          PLAYWRIGHT_BASE_URL: ${{ needs.deploy-web.outputs.url }}

  # Job 9: Notify Success
  notify-success:
    name: Notify Success
    runs-on: ubuntu-latest
    needs: [deploy-web, deploy-firebase]
    if: success() && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/staging')
    steps:
      - name: Notify Slack
        uses: 8398a7/action-slack@v3
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
        with:
          status: success
          text: |
            ✅ Deployment successful!
            Environment: ${{ github.ref == 'refs/heads/main' && 'Production' || 'Staging' }}
            Branch: ${{ github.ref }}
            Commit: ${{ github.sha }}
            Author: ${{ github.actor }}

  # Job 10: Notify Failure
  notify-failure:
    name: Notify Failure
    runs-on: ubuntu-latest
    needs: [quality, test, security, build]
    if: failure()
    steps:
      - name: Notify Slack
        uses: 8398a7/action-slack@v3
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
        with:
          status: failure
          text: |
            ❌ Pipeline failed!
            Workflow: ${{ github.workflow }}
            Branch: ${{ github.ref }}
            Commit: ${{ github.sha }}
            Author: ${{ github.actor }}
            Check: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}